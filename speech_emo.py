# -*- coding: utf-8 -*-
"""Speech_Emo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LlzJQ1KnyXJZg-Pp7rmwmXU8mZJg8S90

# Speech Emotion Recognization
"""

from google.colab import drive
drive.mount('/content/drive')

"""## Importing necessary libaries"""

import librosa
import soundfile
import os, pickle
import glob as gb
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score

"""## DataFlare Extract Features"""

def extract_features(file_name, mfcc, chroma, mel):
    with soundfile.SoundFile(file_name) as sound_file:
        X=sound_file.read(dtype="float32")
        sample_rate=sound_file.samplerate
        result=np.array([])
        if chroma:
          chroma=np.mean(librosa.feature.chroma_stft(y=X, sr=sample_rate).T,axis=0)
          result=np.hstack((result,chroma))
        if mfcc:
          mfcc=np.mean(librosa.feature.mfcc(y=X, sr=sample_rate, n_mfcc=40).T, axis=0)
          result=np.hstack((result,mfcc))
        if mel:
          mel=np.mean(librosa.feature.melspectrogram(y=X, sr=sample_rate).T,axis=0)
          result=np.hstack((result,mel))
    return result

"""## Defining a dictionary. DataFlare - Emotions in the RAVDESS dataset"""

emotions = {
    '01': 'neutral',
    '02': 'calm',
    '03': 'happy',
    '04': 'sad',
    '05': 'angry',
    '06': 'fearful',
    '07': 'disgust',
    '08': 'surprised'
}

"""### Emotions to Observe"""

observed_emotions=['calm','happy','fearful','disgust']

"""## Loading a dataset"""

def load_data(test_size=0.2):
  x,y=[],[]
  for file in gb.glob("/content/drive/MyDrive/Data for ML(rough)/Dataset/Actor_*/*.wav"):
    file_name=os.path.basename(file)
    emotion=emotions[file_name.split("-")[2]]
    if emotion not in observed_emotions:
      continue
    feature=extract_features(file,mfcc=True, chroma=True, mel=True)
    x.append(feature)
    y.append(emotion)
  return train_test_split(np.array(x),y,test_size=test_size,random_state=9)

"""## Splitting the dataset into Train and Test set"""

x_train,x_test,y_train,y_test=load_data(test_size=0.20)
x_train

print((x_train.shape[0], x_test.shape[0]))

"""## Features extracted"""

print(f'Features extracted: {x_train.shape[1]}')

"""## Initialize the Multi Layer Perceptron Classifier"""

model=MLPClassifier(alpha=0.01, batch_size=256, epsilon=1e-08, hidden_layer_sizes=(400,), learning_rate='adaptive', max_iter=500)

"""## Train the model"""

model.fit(x_train,y_train)

"""## Prediction for the test set"""

y_pred=model.predict(x_test)

"""## Calculating the accuracy of our model"""

accuracy=accuracy_score(y_true=y_test,y_pred=y_pred)
print("Accuracy: {:.2f}%".format(accuracy*100))